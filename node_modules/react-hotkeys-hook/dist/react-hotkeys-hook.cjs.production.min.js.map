{"version":3,"file":"react-hotkeys-hook.cjs.production.min.js","sources":["../src/parseHotkeys.ts","../src/validators.ts","../src/BoundHotkeysProxyProvider.tsx","../src/HotkeysProvider.tsx","../src/deepEqual.ts","../src/useHotkeys.ts","../src/isHotkeyPressed.ts","../src/useDeepEqualMemo.ts"],"sourcesContent":["import { Hotkey, KeyboardModifiers, Keys } from './types'\n\nconst reservedModifierKeywords = ['ctrl', 'shift', 'alt', 'meta', 'mod']\n\nconst mappedKeys: Record<string, string> = {\n  esc: 'escape',\n  return: 'enter',\n  left: 'arrowleft',\n  up: 'arrowup',\n  right: 'arrowright',\n  down: 'arrowdown',\n}\n\nexport function parseKeysHookInput(keys: Keys, splitKey: string = ','): string[] {\n  if (typeof keys === 'string') {\n    return keys.split(splitKey)\n  }\n\n  return keys\n}\n\nexport function parseHotkey(hotkey: string, combinationKey: string = '+'): Hotkey {\n  const keys = hotkey\n    .toLocaleLowerCase()\n    .split(combinationKey)\n    .map(k => k.trim())\n    .map(k => mappedKeys[k] || k)\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    shift: keys.includes('shift'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n  }\n\n  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))\n\n  return {\n    ...modifiers,\n    keys: singleCharKeys,\n  }\n}\n","import { FormTags, Hotkey, Scopes, Trigger } from './types'\n\nexport function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {\n  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {\n    e.preventDefault()\n  }\n}\n\nexport function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {\n  if (typeof enabled === 'function') {\n    return enabled(e, hotkey)\n  }\n\n  return enabled === true || enabled === undefined\n}\n\nexport function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {\n  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])\n}\n\nexport function isHotkeyEnabledOnTag({ target }: KeyboardEvent, enabledOnTags: FormTags[] | boolean = false): boolean {\n  const targetTagName = target && (target as HTMLElement).tagName\n\n  if (enabledOnTags instanceof Array) {\n    return Boolean(targetTagName && enabledOnTags && enabledOnTags.some(tag => tag.toLowerCase() === targetTagName.toLowerCase()))\n  }\n\n  return Boolean(targetTagName && enabledOnTags && enabledOnTags === true)\n}\n\nexport function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {\n  if (activeScopes.length === 0 && scopes) {\n    console.warn(\n      'A hotkey has the \"scopes\" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'\n    )\n\n    return true\n  }\n\n  if (!scopes) {\n    return true\n  }\n\n  return activeScopes.some(scope => scopes.includes(scope)) || activeScopes.includes('*')\n}\n\nexport const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, pressedDownKeys: Set<string>): boolean => {\n  const { alt, ctrl, meta, mod, shift, keys } = hotkey\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKeyUppercase, code } = e\n\n  const keyCode = code.toLowerCase().replace('key', '')\n  const pressedKey = pressedKeyUppercase.toLowerCase()\n\n  if (altKey !== alt && pressedKey !== 'alt') {\n    return false\n  }\n\n  if (shiftKey !== shift && pressedKey !== 'shift') {\n    return false\n  }\n\n  // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms\n  if (mod) {\n    if (!metaKey && !ctrlKey) {\n      return false\n    }\n  } else {\n    if (metaKey !== meta && keyCode !== 'meta') {\n      return false\n    }\n\n    if (ctrlKey !== ctrl && keyCode !== 'ctrl') {\n      return false\n    }\n  }\n\n  // All modifiers are correct, now check the key\n  // If the key is set we check for the key\n  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {\n    return true\n  } else if (keys) {\n    // Check if all keys are present in pressedDownKeys set\n    return keys.every(key => pressedDownKeys.has(key))\n  }\n  else if (!keys) {\n    // If the key is not set, we only listen for modifiers, that check went alright, so we return true\n    return true\n  }\n\n  // There is nothing that matches.\n  return false\n}\n","import { createContext, ReactNode, useContext } from 'react'\nimport { Hotkey } from './types'\n\ntype BoundHotkeysProxyProviderType = {\n  addHotkey: (hotkey: Hotkey) => void,\n  removeHotkey: (hotkey: Hotkey) => void,\n}\n\nconst BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)\n\nexport const useBoundHotkeysProxy = () => {\n  return useContext(BoundHotkeysProxyProvider)\n}\n\ninterface Props {\n  children: ReactNode\n  addHotkey: (hotkey: Hotkey) => void\n  removeHotkey: (hotkey: Hotkey) => void\n}\n\nexport default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {\n  return <BoundHotkeysProxyProvider.Provider value={{addHotkey, removeHotkey}}>{children}</BoundHotkeysProxyProvider.Provider>\n}\n","import { Hotkey } from './types'\nimport { createContext, ReactNode, useMemo, useState, useContext } from 'react'\nimport BoundHotkeysProxyProviderProvider from './BoundHotkeysProxyProvider'\n\nexport type HotkeysContextType = {\n  hotkeys: ReadonlyArray<Hotkey>\n  enabledScopes: string[]\n  toggleScope: (scope: string) => void\n  enableScope: (scope: string) => void\n  disableScope: (scope: string) => void\n}\n\n// The context is only needed for special features like global scoping, so we use a graceful default fallback\nconst HotkeysContext = createContext<HotkeysContextType>({\n  hotkeys: [],\n  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not\n  toggleScope: () => {},\n  enableScope: () => {},\n  disableScope: () => {},\n})\n\nexport const useHotkeysContext = () => {\n  return useContext(HotkeysContext)\n}\n\ninterface Props {\n  initiallyActiveScopes?: string[]\n  children: ReactNode\n}\n\nexport const HotkeysProvider = ({initiallyActiveScopes = ['*'], children}: Props) => {\n  const [internalActiveScopes, setInternalActiveScopes] = useState(initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*'])\n  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([]);\n\n  const isAllActive = useMemo(() => internalActiveScopes.includes('*'), [internalActiveScopes])\n\n  const enableScope = (scope: string) => {\n    if (isAllActive) {\n      setInternalActiveScopes([scope])\n    } else {\n      setInternalActiveScopes(Array.from(new Set([...internalActiveScopes, scope])))\n    }\n  }\n\n  const disableScope = (scope: string) => {\n    const scopes = internalActiveScopes.filter(s => s !== scope)\n\n    if (scopes.length === 0) {\n      setInternalActiveScopes(['*'])\n    } else {\n      setInternalActiveScopes(scopes)\n    }\n  }\n\n  const toggleScope = (scope: string) => {\n    if (internalActiveScopes.includes(scope)) {\n      disableScope(scope)\n    } else {\n      enableScope(scope)\n    }\n  }\n\n  const addBoundHotkey = (hotkey: Hotkey) => {\n    setBoundHotkeys([...boundHotkeys, hotkey])\n  }\n\n  const removeBoundHotkey = (hotkey: Hotkey) => {\n    setBoundHotkeys(boundHotkeys.filter(h => h.keys !== hotkey.keys))\n  }\n\n  return (\n    <HotkeysContext.Provider value={{enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope}}>\n      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>\n        {children}\n      </BoundHotkeysProxyProviderProvider>\n    </HotkeysContext.Provider>\n  )\n}\n","export default function deepEqual(x: any, y: any): boolean {\n  //@ts-ignore\n  return (x && y && typeof x === 'object' && typeof y === 'object')\n    //@ts-ignore\n    ? (Object.keys(x).length === Object.keys(y).length) && Object.keys(x).reduce(function(isEqual, key) {\n      return isEqual && deepEqual(x[key], y[key])\n    }, true)\n    : (x === y)\n}\n","import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from './types'\nimport { DependencyList, useCallback, useEffect, useLayoutEffect, useRef } from 'react'\nimport { parseHotkey, parseKeysHookInput } from './parseHotkeys'\nimport {\n  isHotkeyEnabled,\n  isHotkeyEnabledOnTag,\n  isHotkeyMatchingKeyboardEvent,\n  isKeyboardEventTriggeredByInput,\n  isScopeActive,\n  maybePreventDefault,\n} from './validators'\nimport { useHotkeysContext } from './HotkeysProvider'\nimport { useBoundHotkeysProxy } from './BoundHotkeysProxyProvider'\nimport useDeepEqualMemo from './useDeepEqualMemo'\n\nconst stopPropagation = (e: KeyboardEvent): void => {\n  e.stopPropagation()\n  e.preventDefault()\n  e.stopImmediatePropagation()\n}\n\nconst useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default function useHotkeys<T extends HTMLElement>(\n  keys: Keys,\n  callback: HotkeyCallback,\n  options?: OptionsOrDependencyArray,\n  dependencies?: OptionsOrDependencyArray,\n) {\n  const ref = useRef<RefType<T>>(null)\n  const { current: pressedDownKeys } = useRef<Set<string>>(new Set())\n\n  const _options: Options | undefined = !(options instanceof Array) ? (options as Options) : !(dependencies instanceof Array) ? (dependencies as Options) : undefined\n  const _deps: DependencyList = options instanceof Array ? options : dependencies instanceof Array ? dependencies : []\n\n  const cb = useCallback(callback, [..._deps])\n  const memoisedOptions = useDeepEqualMemo(_options)\n\n  const { enabledScopes } = useHotkeysContext()\n  const proxy = useBoundHotkeysProxy()\n\n  useSafeLayoutEffect(() => {\n    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {\n      return\n    }\n\n    const listener = (e: KeyboardEvent) => {\n      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {\n        return\n      }\n\n      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE\n      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WONT TRIGGER THE HOTKEY.\n\n      if (ref.current !== null && document.activeElement !== ref.current && !ref.current.contains(document.activeElement)) {\n        stopPropagation(e)\n\n        return\n      }\n\n      if (((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable)) {\n        return\n      }\n\n      parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => {\n        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)\n\n        if (isHotkeyMatchingKeyboardEvent(e, hotkey, pressedDownKeys) || hotkey.keys?.includes('*')) {\n          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)\n\n          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {\n            stopPropagation(e)\n\n            return\n          }\n\n          cb(e, hotkey)\n        }\n      })\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      pressedDownKeys.add(event.key.toLowerCase())\n\n      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {\n        listener(event)\n      }\n    }\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.key.toLowerCase() !== 'meta') {\n        pressedDownKeys.delete(event.key.toLowerCase())\n      } else {\n        // On macOS pressing down the meta key prevents triggering the keyup event for any other key https://stackoverflow.com/a/57153300/735226.\n        pressedDownKeys.clear()\n      }\n\n      if (memoisedOptions?.keyup) {\n        listener(event)\n      }\n    }\n\n    // @ts-ignore\n    (ref.current || document).addEventListener('keyup', handleKeyUp);\n    // @ts-ignore\n    (ref.current || document).addEventListener('keydown', handleKeyDown)\n\n    if (proxy) {\n      parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey)))\n    }\n\n    return () => {\n      // @ts-ignore\n      (ref.current || document).removeEventListener('keyup', handleKeyUp);\n      // @ts-ignore\n      (ref.current || document).removeEventListener('keydown', handleKeyDown)\n\n      if (proxy) {\n        parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey)))\n      }\n    }\n  }, [keys, cb, memoisedOptions, enabledScopes])\n\n  return ref\n}\n","import { Hotkey } from './types'\nimport { parseHotkey } from './parseHotkeys'\nimport deepEqual from './deepEqual'\n\nconst currentlyPressedKeys: Set<Hotkey> = new Set<Hotkey>()\n\nexport function isHotkeyPressed(key: string | string[], splitKey: string = ','): boolean {\n  const hotkeyArray = Array.isArray(key) ? key : key.split(splitKey)\n\n  return hotkeyArray.every((hotkey) => {\n    const parsedHotkey = parseHotkey(hotkey)\n\n    for (const pressedHotkey of currentlyPressedKeys) {\n      if (deepEqual(parsedHotkey, pressedHotkey)) {\n        return true\n      }\n    }\n  })\n}\n\nexport function pushToCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key]\n\n  hotkeyArray.forEach(hotkey => currentlyPressedKeys.add(parseHotkey(hotkey)))\n}\n\nexport function removeFromCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key]\n\n  hotkeyArray.forEach((hotkey) => {\n    const parsedHotkey = parseHotkey(hotkey)\n\n    for (const pressedHotkey of currentlyPressedKeys) {\n      if (pressedHotkey.keys?.every((key) => parsedHotkey.keys?.includes(key))) {\n        currentlyPressedKeys.delete(pressedHotkey)\n      }\n    }\n  })\n}\n\n(() => {\n  if (typeof window !== 'undefined') {\n    window.addEventListener('DOMContentLoaded', () => {\n      document.addEventListener('keydown', e => {\n        pushToCurrentlyPressedKeys(e.key)\n      })\n\n      document.addEventListener('keyup', e => {\n        removeFromCurrentlyPressedKeys(e.key)\n      })\n    })\n  }\n})()\n","import { useRef } from 'react'\nimport deepEqual from './deepEqual'\n\nexport default function useDeepEqualMemo<T>(value: T) {\n  const ref = useRef<T | undefined>(undefined)\n\n  if (!deepEqual(ref.current, value)) {\n    ref.current = value\n  }\n\n  return ref.current\n}\n"],"names":["reservedModifierKeywords","mappedKeys","esc","return","left","up","right","down","parseKeysHookInput","keys","splitKey","split","parseHotkey","hotkey","combinationKey","toLocaleLowerCase","map","k","trim","alt","includes","ctrl","shift","meta","mod","filter","isHotkeyEnabledOnTag","enabledOnTags","target","targetTagName","tagName","Array","Boolean","some","tag","toLowerCase","BoundHotkeysProxyProvider","createContext","undefined","BoundHotkeysProxyProviderProvider","_jsx","Provider","value","addHotkey","removeHotkey","children","HotkeysContext","hotkeys","enabledScopes","toggleScope","enableScope","disableScope","useHotkeysContext","useContext","deepEqual","x","y","Object","length","reduce","isEqual","key","stopPropagation","e","preventDefault","stopImmediatePropagation","useSafeLayoutEffect","window","useLayoutEffect","useEffect","currentlyPressedKeys","Set","addEventListener","document","isArray","forEach","add","parsedHotkey","pressedHotkey","_pressedHotkey$keys","every","_parsedHotkey$keys","initiallyActiveScopes","useState","internalActiveScopes","setInternalActiveScopes","boundHotkeys","setBoundHotkeys","isAllActive","useMemo","scope","from","scopes","s","h","callback","options","dependencies","ref","useRef","pressedDownKeys","current","_options","cb","useCallback","memoisedOptions","useDeepEqualMemo","proxy","enabled","activeScopes","console","warn","listener","enableOnFormTags","activeElement","contains","_e$target","isContentEditable","enableOnContentEditable","altKey","ctrlKey","metaKey","shiftKey","pressedKeyUppercase","keyCode","code","replace","pressedKey","has","isHotkeyMatchingKeyboardEvent","_hotkey$keys","maybePreventDefault","isHotkeyEnabled","handleKeyDown","event","keydown","keyup","handleKeyUp","clear","removeEventListener"],"mappings":"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"}