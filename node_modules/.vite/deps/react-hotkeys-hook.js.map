{
  "version": 3,
  "sources": ["../../react-hotkeys-hook/src/parseHotkeys.ts", "../../react-hotkeys-hook/src/validators.ts", "../../react-hotkeys-hook/src/BoundHotkeysProxyProvider.tsx", "../../react-hotkeys-hook/src/HotkeysProvider.tsx", "../../react-hotkeys-hook/src/deepEqual.ts", "../../react-hotkeys-hook/src/useDeepEqualMemo.ts", "../../react-hotkeys-hook/src/useHotkeys.ts", "../../react-hotkeys-hook/src/isHotkeyPressed.ts"],
  "sourcesContent": ["import { Hotkey, KeyboardModifiers, Keys } from './types'\n\nconst reservedModifierKeywords = ['ctrl', 'shift', 'alt', 'meta', 'mod']\n\nconst mappedKeys: Record<string, string> = {\n  esc: 'escape',\n  return: 'enter',\n  left: 'arrowleft',\n  up: 'arrowup',\n  right: 'arrowright',\n  down: 'arrowdown',\n}\n\nexport function parseKeysHookInput(keys: Keys, splitKey: string = ','): string[] {\n  if (typeof keys === 'string') {\n    return keys.split(splitKey)\n  }\n\n  return keys\n}\n\nexport function parseHotkey(hotkey: string, combinationKey: string = '+'): Hotkey {\n  const keys = hotkey\n    .toLocaleLowerCase()\n    .split(combinationKey)\n    .map(k => k.trim())\n    .map(k => mappedKeys[k] || k)\n\n  const modifiers: KeyboardModifiers = {\n    alt: keys.includes('alt'),\n    ctrl: keys.includes('ctrl'),\n    shift: keys.includes('shift'),\n    meta: keys.includes('meta'),\n    mod: keys.includes('mod'),\n  }\n\n  const singleCharKeys = keys.filter((k) => !reservedModifierKeywords.includes(k))\n\n  return {\n    ...modifiers,\n    keys: singleCharKeys,\n  }\n}\n", "import { FormTags, Hotkey, Scopes, Trigger } from './types'\n\nexport function maybePreventDefault(e: KeyboardEvent, hotkey: Hotkey, preventDefault?: Trigger): void {\n  if ((typeof preventDefault === 'function' && preventDefault(e, hotkey)) || preventDefault === true) {\n    e.preventDefault()\n  }\n}\n\nexport function isHotkeyEnabled(e: KeyboardEvent, hotkey: Hotkey, enabled?: Trigger): boolean {\n  if (typeof enabled === 'function') {\n    return enabled(e, hotkey)\n  }\n\n  return enabled === true || enabled === undefined\n}\n\nexport function isKeyboardEventTriggeredByInput(ev: KeyboardEvent): boolean {\n  return isHotkeyEnabledOnTag(ev, ['input', 'textarea', 'select'])\n}\n\nexport function isHotkeyEnabledOnTag({ target }: KeyboardEvent, enabledOnTags: FormTags[] | boolean = false): boolean {\n  const targetTagName = target && (target as HTMLElement).tagName\n\n  if (enabledOnTags instanceof Array) {\n    return Boolean(targetTagName && enabledOnTags && enabledOnTags.some(tag => tag.toLowerCase() === targetTagName.toLowerCase()))\n  }\n\n  return Boolean(targetTagName && enabledOnTags && enabledOnTags === true)\n}\n\nexport function isScopeActive(activeScopes: string[], scopes?: Scopes): boolean {\n  if (activeScopes.length === 0 && scopes) {\n    console.warn(\n      'A hotkey has the \"scopes\" option set, however no active scopes were found. If you want to use the global scopes feature, you need to wrap your app in a <HotkeysProvider>'\n    )\n\n    return true\n  }\n\n  if (!scopes) {\n    return true\n  }\n\n  return activeScopes.some(scope => scopes.includes(scope)) || activeScopes.includes('*')\n}\n\nexport const isHotkeyMatchingKeyboardEvent = (e: KeyboardEvent, hotkey: Hotkey, pressedDownKeys: Set<string>): boolean => {\n  const { alt, ctrl, meta, mod, shift, keys } = hotkey\n  const { altKey, ctrlKey, metaKey, shiftKey, key: pressedKeyUppercase, code } = e\n\n  const keyCode = code.toLowerCase().replace('key', '')\n  const pressedKey = pressedKeyUppercase.toLowerCase()\n\n  if (altKey !== alt && pressedKey !== 'alt') {\n    return false\n  }\n\n  if (shiftKey !== shift && pressedKey !== 'shift') {\n    return false\n  }\n\n  // Mod is a special key name that is checking for meta on macOS and ctrl on other platforms\n  if (mod) {\n    if (!metaKey && !ctrlKey) {\n      return false\n    }\n  } else {\n    if (metaKey !== meta && keyCode !== 'meta') {\n      return false\n    }\n\n    if (ctrlKey !== ctrl && keyCode !== 'ctrl') {\n      return false\n    }\n  }\n\n  // All modifiers are correct, now check the key\n  // If the key is set we check for the key\n  if (keys && keys.length === 1 && (keys.includes(pressedKey) || keys.includes(keyCode))) {\n    return true\n  } else if (keys) {\n    // Check if all keys are present in pressedDownKeys set\n    return keys.every(key => pressedDownKeys.has(key))\n  }\n  else if (!keys) {\n    // If the key is not set, we only listen for modifiers, that check went alright, so we return true\n    return true\n  }\n\n  // There is nothing that matches.\n  return false\n}\n", "import { createContext, ReactNode, useContext } from 'react'\nimport { Hotkey } from './types'\n\ntype BoundHotkeysProxyProviderType = {\n  addHotkey: (hotkey: Hotkey) => void,\n  removeHotkey: (hotkey: Hotkey) => void,\n}\n\nconst BoundHotkeysProxyProvider = createContext<BoundHotkeysProxyProviderType | undefined>(undefined)\n\nexport const useBoundHotkeysProxy = () => {\n  return useContext(BoundHotkeysProxyProvider)\n}\n\ninterface Props {\n  children: ReactNode\n  addHotkey: (hotkey: Hotkey) => void\n  removeHotkey: (hotkey: Hotkey) => void\n}\n\nexport default function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }: Props) {\n  return <BoundHotkeysProxyProvider.Provider value={{addHotkey, removeHotkey}}>{children}</BoundHotkeysProxyProvider.Provider>\n}\n", "import { Hotkey } from './types'\nimport { createContext, ReactNode, useMemo, useState, useContext } from 'react'\nimport BoundHotkeysProxyProviderProvider from './BoundHotkeysProxyProvider'\n\nexport type HotkeysContextType = {\n  hotkeys: ReadonlyArray<Hotkey>\n  enabledScopes: string[]\n  toggleScope: (scope: string) => void\n  enableScope: (scope: string) => void\n  disableScope: (scope: string) => void\n}\n\n// The context is only needed for special features like global scoping, so we use a graceful default fallback\nconst HotkeysContext = createContext<HotkeysContextType>({\n  hotkeys: [],\n  enabledScopes: [], // This array has to be empty instead of containing '*' as default, to check if the provider is set or not\n  toggleScope: () => {},\n  enableScope: () => {},\n  disableScope: () => {},\n})\n\nexport const useHotkeysContext = () => {\n  return useContext(HotkeysContext)\n}\n\ninterface Props {\n  initiallyActiveScopes?: string[]\n  children: ReactNode\n}\n\nexport const HotkeysProvider = ({initiallyActiveScopes = ['*'], children}: Props) => {\n  const [internalActiveScopes, setInternalActiveScopes] = useState(initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ['*'])\n  const [boundHotkeys, setBoundHotkeys] = useState<Hotkey[]>([]);\n\n  const isAllActive = useMemo(() => internalActiveScopes.includes('*'), [internalActiveScopes])\n\n  const enableScope = (scope: string) => {\n    if (isAllActive) {\n      setInternalActiveScopes([scope])\n    } else {\n      setInternalActiveScopes(Array.from(new Set([...internalActiveScopes, scope])))\n    }\n  }\n\n  const disableScope = (scope: string) => {\n    const scopes = internalActiveScopes.filter(s => s !== scope)\n\n    if (scopes.length === 0) {\n      setInternalActiveScopes(['*'])\n    } else {\n      setInternalActiveScopes(scopes)\n    }\n  }\n\n  const toggleScope = (scope: string) => {\n    if (internalActiveScopes.includes(scope)) {\n      disableScope(scope)\n    } else {\n      enableScope(scope)\n    }\n  }\n\n  const addBoundHotkey = (hotkey: Hotkey) => {\n    setBoundHotkeys([...boundHotkeys, hotkey])\n  }\n\n  const removeBoundHotkey = (hotkey: Hotkey) => {\n    setBoundHotkeys(boundHotkeys.filter(h => h.keys !== hotkey.keys))\n  }\n\n  return (\n    <HotkeysContext.Provider value={{enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope}}>\n      <BoundHotkeysProxyProviderProvider addHotkey={addBoundHotkey} removeHotkey={removeBoundHotkey}>\n        {children}\n      </BoundHotkeysProxyProviderProvider>\n    </HotkeysContext.Provider>\n  )\n}\n", "export default function deepEqual(x: any, y: any): boolean {\n  //@ts-ignore\n  return (x && y && typeof x === 'object' && typeof y === 'object')\n    //@ts-ignore\n    ? (Object.keys(x).length === Object.keys(y).length) && Object.keys(x).reduce(function(isEqual, key) {\n      return isEqual && deepEqual(x[key], y[key])\n    }, true)\n    : (x === y)\n}\n", "import { useRef } from 'react'\nimport deepEqual from './deepEqual'\n\nexport default function useDeepEqualMemo<T>(value: T) {\n  const ref = useRef<T | undefined>(undefined)\n\n  if (!deepEqual(ref.current, value)) {\n    ref.current = value\n  }\n\n  return ref.current\n}\n", "import { HotkeyCallback, Keys, Options, OptionsOrDependencyArray, RefType } from './types'\nimport { DependencyList, useCallback, useEffect, useLayoutEffect, useRef } from 'react'\nimport { parseHotkey, parseKeysHookInput } from './parseHotkeys'\nimport {\n  isHotkeyEnabled,\n  isHotkeyEnabledOnTag,\n  isHotkeyMatchingKeyboardEvent,\n  isKeyboardEventTriggeredByInput,\n  isScopeActive,\n  maybePreventDefault,\n} from './validators'\nimport { useHotkeysContext } from './HotkeysProvider'\nimport { useBoundHotkeysProxy } from './BoundHotkeysProxyProvider'\nimport useDeepEqualMemo from './useDeepEqualMemo'\n\nconst stopPropagation = (e: KeyboardEvent): void => {\n  e.stopPropagation()\n  e.preventDefault()\n  e.stopImmediatePropagation()\n}\n\nconst useSafeLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n\nexport default function useHotkeys<T extends HTMLElement>(\n  keys: Keys,\n  callback: HotkeyCallback,\n  options?: OptionsOrDependencyArray,\n  dependencies?: OptionsOrDependencyArray,\n) {\n  const ref = useRef<RefType<T>>(null)\n  const { current: pressedDownKeys } = useRef<Set<string>>(new Set())\n\n  const _options: Options | undefined = !(options instanceof Array) ? (options as Options) : !(dependencies instanceof Array) ? (dependencies as Options) : undefined\n  const _deps: DependencyList = options instanceof Array ? options : dependencies instanceof Array ? dependencies : []\n\n  const cb = useCallback(callback, [..._deps])\n  const memoisedOptions = useDeepEqualMemo(_options)\n\n  const { enabledScopes } = useHotkeysContext()\n  const proxy = useBoundHotkeysProxy()\n\n  useSafeLayoutEffect(() => {\n    if (memoisedOptions?.enabled === false || !isScopeActive(enabledScopes, memoisedOptions?.scopes)) {\n      return\n    }\n\n    const listener = (e: KeyboardEvent) => {\n      if (isKeyboardEventTriggeredByInput(e) && !isHotkeyEnabledOnTag(e, memoisedOptions?.enableOnFormTags)) {\n        return\n      }\n\n      // TODO: SINCE THE EVENT IS NOW ATTACHED TO THE REF, THE ACTIVE ELEMENT CAN NEVER BE INSIDE THE REF. THE HOTKEY ONLY TRIGGERS IF THE\n      // REF IS THE ACTIVE ELEMENT. THIS IS A PROBLEM SINCE FOCUSED SUB COMPONENTS WONT TRIGGER THE HOTKEY.\n\n      if (ref.current !== null && document.activeElement !== ref.current && !ref.current.contains(document.activeElement)) {\n        stopPropagation(e)\n\n        return\n      }\n\n      if (((e.target as HTMLElement)?.isContentEditable && !memoisedOptions?.enableOnContentEditable)) {\n        return\n      }\n\n      parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => {\n        const hotkey = parseHotkey(key, memoisedOptions?.combinationKey)\n\n        if (isHotkeyMatchingKeyboardEvent(e, hotkey, pressedDownKeys) || hotkey.keys?.includes('*')) {\n          maybePreventDefault(e, hotkey, memoisedOptions?.preventDefault)\n\n          if (!isHotkeyEnabled(e, hotkey, memoisedOptions?.enabled)) {\n            stopPropagation(e)\n\n            return\n          }\n\n          cb(e, hotkey)\n        }\n      })\n    }\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      pressedDownKeys.add(event.key.toLowerCase())\n\n      if ((memoisedOptions?.keydown === undefined && memoisedOptions?.keyup !== true) || memoisedOptions?.keydown) {\n        listener(event)\n      }\n    }\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      if (event.key.toLowerCase() !== 'meta') {\n        pressedDownKeys.delete(event.key.toLowerCase())\n      } else {\n        // On macOS pressing down the meta key prevents triggering the keyup event for any other key https://stackoverflow.com/a/57153300/735226.\n        pressedDownKeys.clear()\n      }\n\n      if (memoisedOptions?.keyup) {\n        listener(event)\n      }\n    }\n\n    // @ts-ignore\n    (ref.current || document).addEventListener('keyup', handleKeyUp);\n    // @ts-ignore\n    (ref.current || document).addEventListener('keydown', handleKeyDown)\n\n    if (proxy) {\n      parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => proxy.addHotkey(parseHotkey(key, memoisedOptions?.combinationKey)))\n    }\n\n    return () => {\n      // @ts-ignore\n      (ref.current || document).removeEventListener('keyup', handleKeyUp);\n      // @ts-ignore\n      (ref.current || document).removeEventListener('keydown', handleKeyDown)\n\n      if (proxy) {\n        parseKeysHookInput(keys, memoisedOptions?.splitKey).forEach((key) => proxy.removeHotkey(parseHotkey(key, memoisedOptions?.combinationKey)))\n      }\n    }\n  }, [keys, cb, memoisedOptions, enabledScopes])\n\n  return ref\n}\n", "import { Hotkey } from './types'\nimport { parseHotkey } from './parseHotkeys'\nimport deepEqual from './deepEqual'\n\nconst currentlyPressedKeys: Set<Hotkey> = new Set<Hotkey>()\n\nexport function isHotkeyPressed(key: string | string[], splitKey: string = ','): boolean {\n  const hotkeyArray = Array.isArray(key) ? key : key.split(splitKey)\n\n  return hotkeyArray.every((hotkey) => {\n    const parsedHotkey = parseHotkey(hotkey)\n\n    for (const pressedHotkey of currentlyPressedKeys) {\n      if (deepEqual(parsedHotkey, pressedHotkey)) {\n        return true\n      }\n    }\n  })\n}\n\nexport function pushToCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key]\n\n  hotkeyArray.forEach(hotkey => currentlyPressedKeys.add(parseHotkey(hotkey)))\n}\n\nexport function removeFromCurrentlyPressedKeys(key: string | string[]): void {\n  const hotkeyArray = Array.isArray(key) ? key : [key]\n\n  hotkeyArray.forEach((hotkey) => {\n    const parsedHotkey = parseHotkey(hotkey)\n\n    for (const pressedHotkey of currentlyPressedKeys) {\n      if (pressedHotkey.keys?.every((key) => parsedHotkey.keys?.includes(key))) {\n        currentlyPressedKeys.delete(pressedHotkey)\n      }\n    }\n  })\n}\n\n(() => {\n  if (typeof window !== 'undefined') {\n    window.addEventListener('DOMContentLoaded', () => {\n      document.addEventListener('keydown', e => {\n        pushToCurrentlyPressedKeys(e.key)\n      })\n\n      document.addEventListener('keyup', e => {\n        removeFromCurrentlyPressedKeys(e.key)\n      })\n    })\n  }\n})()\n"],
  "mappings": "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",
  "names": ["reservedModifierKeywords", "mappedKeys", "esc", "left", "up", "right", "down", "parseKeysHookInput", "keys", "splitKey", "split", "parseHotkey", "hotkey", "combinationKey", "toLocaleLowerCase", "map", "k", "trim", "modifiers", "alt", "includes", "ctrl", "shift", "meta", "mod", "singleCharKeys", "filter", "maybePreventDefault", "e", "preventDefault", "isHotkeyEnabled", "enabled", "undefined", "isKeyboardEventTriggeredByInput", "ev", "isHotkeyEnabledOnTag", "enabledOnTags", "target", "targetTagName", "tagName", "Array", "Boolean", "some", "tag", "toLowerCase", "isScopeActive", "activeScopes", "scopes", "length", "console", "warn", "scope", "isHotkeyMatchingKeyboardEvent", "pressedDownKeys", "altKey", "ctrlKey", "metaKey", "shiftKey", "pressedKeyUppercase", "key", "code", "keyCode", "replace", "pressedKey", "every", "has", "BoundHotkeysProxyProvider", "createContext", "useBoundHotkeysProxy", "useContext", "BoundHotkeysProxyProviderProvider", "addHotkey", "removeHotkey", "children", "_jsx", "HotkeysContext", "hotkeys", "enabledScopes", "toggleScope", "enableScope", "disableScope", "useHotkeysContext", "HotkeysProvider", "initiallyActiveScopes", "useState", "internalActiveScopes", "setInternalActiveScopes", "boundHotkeys", "setBoundHotkeys", "isAllActive", "useMemo", "from", "Set", "s", "addBoundHotkey", "removeBoundHotkey", "h", "deepEqual", "x", "y", "Object", "reduce", "isEqual", "useDeepEqualMemo", "value", "ref", "useRef", "current", "stopPropagation", "stopImmediatePropagation", "useSafeLayoutEffect", "window", "useLayoutEffect", "useEffect", "useHotkeys", "callback", "options", "dependencies", "_options", "_deps", "cb", "useCallback", "memoisedOptions", "proxy", "listener", "enableOnFormTags", "document", "activeElement", "contains", "isContentEditable", "enableOnContentEditable", "forEach", "handleKeyDown", "event", "add", "keydown", "keyup", "handleKeyUp", "clear", "addEventListener", "removeEventListener", "currentlyPressedKeys", "isHotkeyPressed", "hotkeyArray", "isArray", "parsedHotkey", "pressedHotkey", "pushToCurrentlyPressedKeys", "removeFromCurrentlyPressedKeys"]
}
